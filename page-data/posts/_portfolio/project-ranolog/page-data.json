{"componentChunkName":"component---src-pages-custom-post-tsx","path":"/posts/_portfolio/project-ranolog/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"7e47c4a5-d2d6-57b9-ab2d-36b021611114","fields":{"slug":"/_portfolio/project-ranolog/"},"html":"<h4 class=\"bg--gray text--bold\"> 🧚🏻&nbsp;&nbsp;구현 요약</h4>\n<ul>\n<li>컴포넌트의 재사용화를 위해 커스텀 훅으로 비즈니스 로직 분리했습니다.</li>\n<li>개발 시 컴포넌트 단위로 테스트하며 작업하기 위해 <code class=\"language-text\">Storybook</code>을 활용하였습니다.</li>\n<li><code class=\"language-text\">emotion</code>, <code class=\"language-text\">Styled System</code>을 활용하여 반응형 작업을 하였습니다.</li>\n</ul>\n<h4 class=\"bg--gray text--bold\">🤔&nbsp;&nbsp;고민한 점</h4>\n<p>\n  <strong>컴포넌트의 부모 컴포넌트에서 컴포넌트의 상태 변경</strong>\n  <span>⇒</span>\n  <span class=\"text--italic text--bold text--gray\">useImperativeHandle 활용</span>\n</p>\n<hr class=\"thin\" />\n<ol>\n  <li>\n    <p>\n      <code class=\"language--text text--brown text--bold\">문제</code>\n      <span>컴포넌트의 부모 컴포넌트에서 컴포넌트의 상태 변경</span>\n    </p>\n    <p>\n      <code class=\"language--text text--purple text--bold\">해결</code>\n      <span class=\"bg--green text--italic\">👇 <strong>내용 참고</strong></span>\n    </p>\n    <ul class=\"pl--24 alpha\">\n      <li>컴포넌트에 <code class=\"language--text \">forwardRef</code> & <code class=\"language--text \">useImperativeHandle</code> 적용</li>\n      <li>컴포넌트의 <code class=\"language--text \">useImperativeHandle</code>에 컴포넌트 상태를 변경하는 함수 정의</li>\n      <li>부모 컴포넌트에서 컴포넌트에 <strong>ref</strong>를 전달</li>\n      <li>부모 컴포넌트에서 <strong>ref</strong>를 통해 컴포넌트에 정의한 함수 사용</li>\n    </ul>\n  </li>\n</ol>\n<hr class=\"thin\" />\n<br/>\n<p>\n  <strong>검색 시 많은 이벤트 호출</strong>\n  <span>⇒</span>\n  <span class=\"text--italic text--bold text--gray\">Debounce 활용하여 제어</span>\n</p>\n<hr class=\"thin\" />\n<ol>\n  <li>\n    <p>\n      <code class=\"language--text text--brown text--bold\">문제</code>\n      <span>블로그 글 검색 시, 사용자가 입력할 때마다 이벤트 발생</span>\n    </p>\n    <p>\n      <code class=\"language--text text--purple text--bold\">해결</code>\n      <span>입력할 때마다 이벤트가 호출되는 것이 아닌 마지막 호출에서 1초가 지난 후 함수의 기능이 동작하도록 함</span>\n    </p>\n  </li>\n</ol>\n<hr class=\"thin\" />\n<br/>\n<p>\n  <strong>다양한 Markdown의 Frontmatter 정보를 쉽게 입력하려면?</strong>\n  <span>⇒</span>\n  <span class=\"text--italic text--bold text--gray\">Docs Maker(CLI) 제작</span>\n</p>\n<hr class=\"thin\" />\n<ol>\n  <li>\n    <p>\n      <code class=\"language--text text--brown text--bold\">문제</code>\n      <span>문서 형식이 전부 다름 (<span class=\"text--gray\">Blog</span>(Post), <span class=\"text--gray\">Projects</span>, <span class=\"text--gray\">Resume</span>)</span>\n    </p>\n    <p>\n      <code class=\"language--text text--purple text--bold\">해결</code>\n      <span>사용자로부터 문서의 타입과 데이터를 입력 받음</span>\n    </p>\n  </li>\n  <li>\n    <p>\n      <code class=\"language--text text--brown text--bold\">문제</code>\n      <span>사용자에게 모든 데이터를 입력 받아 JSON으로 생성 → frontmatter로 변환</span>\n    </p>\n    <p>\n      <code class=\"language--text text--purple text--bold\">해결</code>\n      <span>정규표현식을 활용하여 frontmatter 형식에 맞춰 변환</span>\n    </p>\n  </li>\n</ol>\n<hr class=\"thin\" />","frontmatter":{"title":"","summary":null,"date":null,"categories":null,"options":{"isPortfolio":true,"hide":true},"thumbnail":null}}}]}},"pageContext":{"slug":"/_portfolio/project-ranolog/"}},"staticQueryHashes":["1642645631","2183628444","2643874338","3590156278","3949884163","77750267","884297919"]}
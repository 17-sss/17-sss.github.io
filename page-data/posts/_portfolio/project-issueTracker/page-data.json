{"componentChunkName":"component---src-pages-custom-post-tsx","path":"/posts/_portfolio/project-issueTracker/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"20529d3b-d10c-59f4-bf56-79537ab19cbb","fields":{"slug":"/_portfolio/project-issueTracker/"},"html":"<h4 class=\"bg--gray text--bold\">🤝&nbsp;&nbsp;협업</h4>\n<ul>\n<li>팀원분들과 지속적으로 진행상황을 주고 받으며 작업하였습니다.</li>\n<li>매일 하루 일정이 끝나고 줌으로 스크럼을 하였습니다.</li>\n</ul>\n<h4 class=\"bg--gray text--bold\">🧚🏻&nbsp;&nbsp;구현 요약</h4>\n<ul>\n<li>서버와 통신을 하는 커스텀 훅 useFetch를 제작하였습니다.</li>\n<li>서버와 통신 후 반환되는 모든 데이터에 대한 타입을 지정하였습니다.<br>\n반환되는 데이터 타입을 useFetch를 호출하는 컴포넌트에서도 알 수 있도록 제네릭을 활용하였습니다.</li>\n<li>받아온 데이터를 “담당자” / “라벨” / “마일스톤” / “작성자” 옵션을 선택하여 필터링 할 수 있도록 제작하였습니다.</li>\n</ul>\n<h4 class=\"bg--gray text--bold\">🤔&nbsp;&nbsp;고민한 점</h4>\n<p>\n  <strong>이슈 목록 필터링 기능 제작</strong>\n  <span>⇒</span>\n  <span class=\"text--italic text--bold text--gray\">커링 개념 접목</span>\n</p>\n<hr class=\"thin\" />\n<ol>\n  <li>\n    <p>\n      <code class=\"language--text text--brown text--bold\">문제</code>\n      <span>서버에서 필터링되지 않은 모든 데이터를 전송, 각 옵션에 부합하는 데이터를 필터링해야 함</span>\n    </p>\n    <p>\n      <code class=\"language--text text--purple text--bold\">해결</code>\n      <span>각 옵션에 따라 받아온 데이터를 필터링하는 함수들을 작성하여 해결</span>\n    </p>\n    <hr class=\"thin\" />\n  </li>\n  <li>\n    <p>\n      <code class=\"language--text text--brown text--bold\">문제</code>\n      <span>필터링 함수가 옵션의 갯수만큼 다수 존재하며, 모든 필터링 함수를 한번에 실행. (동작과정을 확연하게 알 수 없음)\n      </span>\n    </p>\n    <p>\n      <code class=\"language--text text--purple text--bold\">해결</code>\n      <span\n        >커링 개념을 접목한 <code class=\"language--text\">pipe</code> 함수를 작성하여, 필터링 함수들을 <code class=\"language--text\">pipe</code> 인자로써\n        전달함으로써 해결 / <a href=\"https://boiled-feather-1c7.notion.site/Pipe-fa5c11ec8e2c41edb9ce85e04dd19bdf\">예시 코드</a> ⭐️</span\n      >\n    </p>\n  </li>\n</ol>\n<hr class=\"thin\" />\n<br/>\n<p>\n  <strong>서버에 데이터 요청</strong>\n  <span>⇒</span>\n  <span class=\"text--italic text--bold text--gray\">커스텀 훅 제작과 동작 방식 변경</span>\n</p>\n<hr class=\"thin\" />\n<ol>\n  <li>\n    <p>\n      <code class=\"language--text text--brown text--bold\">문제</code>\n      <span>데이터 요청을 필요한 컴포넌트내에서 fetch API와 관련된 로직을 작성 ⇒ 가독성 저하</span>\n    </p>\n    <p>\n      <code class=\"language--text text--purple text--bold\">해결</code>\n      <span\n        >데이터 요청과 관련된 로직들을 분리하여 <code class=\"language--text\">useFetch</code> 커스텀 훅으로 작성함으로써\n        해결</span\n      >\n    </p>\n    <hr class=\"thin\" />\n  </li>\n  <li>\n    <p>\n      <code class=\"language--text text--brown text--bold\">문제</code>\n      <span>모든 (이슈목록, 마일스톤, 라벨, 유저) 데이터는 로그인한 유저의 정보가 있어야 불러올 수 있음</span>\n    </p>\n    <p>\n      <code class=\"language--text text--purple text--bold\">해결</code>\n      <span\n        ><code class=\"language--text\">useFetch</code>에 감시하고 있을 <u>상태 값(로그인한 유저 정보)</u>이 포함된\n        <u>배열</u>을 <strong>인자</strong>로 전달하여 <strong>해결</strong></span\n      >\n    </p>\n    <ul class=\"pl--24 alpha\">\n      <li>\n        <span\n          >인자(배열) 값은 <code class=\"language--text\">useFetch</code>내에서 쓰이는 <strong>useEffect</strong> 훅의\n          2번째 인자에 들어가게 됨</span\n        ><br />\n        <span>(배열 내의 모든 상태 값들이 <span class=\"text--pink text--italic\">falsy</span>한 상태가 아니라면 데이터를 불러오도록 로직을 작성함)</span>\n      </li>\n    </ul>\n  </li>\n</ol>\n<hr class=\"thin\" />","frontmatter":{"title":"","summary":null,"date":null,"categories":null,"options":{"isPortfolio":true,"hide":true},"thumbnail":null}}}]}},"pageContext":{"slug":"/_portfolio/project-issueTracker/"}},"staticQueryHashes":["1642645631","2183628444","2643874338","3590156278","3949884163","77750267","884297919"]}